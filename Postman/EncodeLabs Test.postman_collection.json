{
	"info": {
		"_postman_id": "8afc49ae-e2ca-465b-b4ff-c94060612cde",
		"name": "EncodeLabs Test",
		"description": "Coleccion de request y test para la API.\n\nSi se cambia el puerto en la app, cambiar el puerto en localURL.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46453376"
	},
	"item": [
		{
			"name": "Add Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"product_name\", \"ProductName_\" + Math.floor(Math.random() * 10000));\r",
							"pm.variables.set(\"product_description\", \"Test Product\");\r",
							"pm.variables.set(\"product_price\", (Math.random() * 1000).toFixed(2));\r",
							"pm.variables.set(\"product_quantity\", Math.round(Math.random() * 10));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.test(\"POST Response has all Fields\", function () {\r",
							"    let response;\r",
							"\r",
							"    try {\r",
							"        response = pm.response.json();\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"Invalid JSON Object!\");\r",
							"    }\r",
							"\r",
							"    pm.expect(response).to.have.property(\"id\");\r",
							"    pm.expect(response).to.have.property(\"name\");\r",
							"    pm.expect(response).to.have.property(\"description\");\r",
							"    pm.expect(response).to.have.property(\"price\");\r",
							"    pm.expect(response).to.have.property(\"quantity\");\r",
							"});\r",
							"\r",
							"pm.test(\"Valid POST Response\", function () {\r",
							"    let response;\r",
							"\r",
							"    try {\r",
							"        response = pm.response.json();\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"Invalid JSON Object!\");\r",
							"    }\r",
							"\r",
							"    if (response.type != undefined) {\r",
							"        pm.expect.fail(\"Request ended with an error response!\");\r",
							"    }\r",
							"\r",
							"    pm.expect(response.name).to.be.a(\"string\");\r",
							"    pm.expect(response.name).to.not.be.empty;\r",
							"    pm.expect(response.name.length).to.be.above(3);\r",
							"\r",
							"    pm.expect(response.description).to.be.a(\"string\");\r",
							"    pm.expect(response.description).to.not.be.empty;\r",
							"\r",
							"    pm.expect(response.price).to.be.a(\"number\");\r",
							"    pm.expect(response.price).to.be.above(-0.1);\r",
							"\r",
							"    pm.expect(response.quantity).to.be.a(\"number\");\r",
							"    pm.expect(response.quantity).to.be.above(-0.1);\r",
							"});\r",
							"\r",
							"pm.test(\"POST Response Integrity\", function () {\r",
							"    let response;\r",
							"\r",
							"    try {\r",
							"        response = pm.response.json();\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"Invalid JSON Object!\");\r",
							"    }\r",
							"\r",
							"    const request = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"    pm.expect(response.name).to.eql(request.name);\r",
							"    pm.expect(response.description).to.eql(request.description);\r",
							"    pm.expect(response.price).to.eql(request.price);\r",
							"    pm.expect(response.quantity).to.eql(request.quantity);\r",
							"});\r",
							"\r",
							"let _response;\r",
							"\r",
							"try {\r",
							"    _response = pm.response.json();\r",
							"} catch (e) {\r",
							"    return;\r",
							"}\r",
							"\r",
							"pm.globals.set(\"last_id\", _response.id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{product_name}}\",\r\n    \"description\": \"{{product_description}}\",\r\n    \"price\": {{product_price}},\r\n    \"quantity\": {{product_quantity}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{localURL}}/api/Productos/add",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"add"
					]
				},
				"description": "AÃ±ade un producto a la base de datos"
			},
			"response": [
				{
					"name": "Add Product request 201 Code",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Manzanas\",\r\n    \"description\": \"1kg de Manazanas\",\r\n    \"price\": 2500.0,\r\n    \"quantity\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7138/api/Productos/add",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"add"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Fri, 04 Jul 2025 23:53:32 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Location",
							"value": "https://localhost:7138/api/Productos/find/1"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 1,\n    \"name\": \"Manzanas\",\n    \"description\": \"1kg de Manazanas\",\n    \"price\": 2500,\n    \"quantity\": 10\n}"
				},
				{
					"name": "Add Product request 400 code",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"description\": \"\",\r\n    \"price\": -5000.0,\r\n    \"quantity\": -1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localURL}}/api/Productos/add",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"api",
								"Productos",
								"add"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/problem+json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 15:57:29 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [
						{
							"expires": "Invalid Date"
						}
					],
					"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"Name\": [\n            \"The Name field is required.\",\n            \"The field Name must be a string or array type with a minimum length of '4'.\"\n        ],\n        \"Price\": [\n            \"The field Price must be between 0,1 and 1,7976931348623157E+308.\"\n        ],\n        \"Quantity\": [\n            \"The field Quantity must be between 0 and 2147483647.\"\n        ],\n        \"Description\": [\n            \"The Description field is required.\"\n        ]\n    },\n    \"traceId\": \"00-840ed3de3ccdf8f6f9dd021aad8adccc-309521fe45fe8da0-00\"\n}"
				}
			]
		},
		{
			"name": "Enlist Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is valid JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response elements well formed\", function () {\r",
							"    let response;\r",
							"\r",
							"    try {\r",
							"        response = pm.response.json();\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"Invalid JSON Object!\");\r",
							"    }\r",
							"\r",
							"    if (response.length == 0) return;\r",
							"    \r",
							"    pm.expect(response[0]).to.have.property(\"id\");\r",
							"    pm.expect(response[0]).to.have.property(\"name\");\r",
							"    pm.expect(response[0]).to.have.property(\"description\");\r",
							"    pm.expect(response[0]).to.have.property(\"price\");\r",
							"    pm.expect(response[0]).to.have.property(\"quantity\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{localURL}}/api/Productos/enlist",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"enlist"
					]
				},
				"description": "Crea una lista de productos que se encuentran en el momento dentro de la base de datos"
			},
			"response": [
				{
					"name": "Enlist Products 200 code",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7138/api/Productos/enlist",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"enlist"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 00:01:38 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 1,\n        \"name\": \"Manzanas\",\n        \"description\": \"1kg de Manazanas\",\n        \"price\": 2500,\n        \"quantity\": 10\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Peras\",\n        \"description\": \"1kg de Peras\",\n        \"price\": 2000,\n        \"quantity\": 8\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Mandarinas\",\n        \"description\": \"1kg de Mandarinas\",\n        \"price\": 1500,\n        \"quantity\": 15\n    }\n]"
				}
			]
		},
		{
			"name": "Get by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful GET request code\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is valid JSON\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"POST Response has all Fields\", function () {\r",
							"    let response;\r",
							"\r",
							"    try {\r",
							"        response = pm.response.json();\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"Invalid JSON Object!\");\r",
							"    }\r",
							"\r",
							"    pm.expect(response).to.have.property(\"name\");\r",
							"    pm.expect(response).to.have.property(\"description\");\r",
							"    pm.expect(response).to.have.property(\"price\");\r",
							"    pm.expect(response).to.have.property(\"quantity\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{localURL}}/api/Productos/find/{{last_id}}",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"find",
						"{{last_id}}"
					]
				},
				"description": "Busca un producto dentro de la base de datos usando un ID"
			},
			"response": [
				{
					"name": "Get by ID 200 Code",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7138/api/Productos/find/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"find",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 00:01:54 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 1,\n    \"name\": \"Manzanas\",\n    \"description\": \"1kg de Manazanas\",\n    \"price\": 2500,\n    \"quantity\": 10\n}"
				},
				{
					"name": "Get by ID 404 Code",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{localURL}}/api/Productos/find/2",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"api",
								"Productos",
								"find",
								"2"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 19:00:45 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "Requested ID was not found"
				}
			]
		},
		{
			"name": "Update Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"product_name\", \"ProductName_\" + Math.floor(Math.random() * 10000));\r",
							"pm.variables.set(\"product_description\", \"Updated Test Product\");\r",
							"pm.variables.set(\"product_price\", (Math.random() * 1000).toFixed(2));\r",
							"pm.variables.set(\"product_quantity\", Math.round(Math.random() * 10));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request code\", function () {\r",
							"        pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Empty response\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"PUT request has all Fields\", function () {\r",
							"    const request = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"    pm.expect(request).to.have.property(\"name\");\r",
							"    pm.expect(request).to.have.property(\"description\");\r",
							"    pm.expect(request).to.have.property(\"price\");\r",
							"    pm.expect(request).to.have.property(\"quantity\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{product_name}}\",\r\n    \"description\": \"{{product_description}}\",\r\n    \"price\": {{product_price}},\r\n    \"quantity\": {{product_quantity}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{localURL}}/api/Productos/update/{{last_id}}",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"update",
						"{{last_id}}"
					]
				},
				"description": "Actualiza un producto que se encuentra en la base de datos usando un ID"
			},
			"response": [
				{
					"name": "Update Product 204 Code",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Manzanas\",\r\n    \"description\": \"2kg de Manazanas\",\r\n    \"price\": 5000.0,\r\n    \"quantity\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7138/api/Productos/update/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"update",
								"1"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 04 Jul 2025 23:55:32 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						}
					],
					"cookie": [],
					"body": null
				},
				{
					"name": "Update Product 404 Code",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Manzanas\",\r\n    \"description\": \"2kg de Manazanas\",\r\n    \"price\": 5000.0,\r\n    \"quantity\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{localURL}}/api/Productos/update/2",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"api",
								"Productos",
								"update",
								"2"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 19:03:32 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "Requested product with id 2 couldn't be found"
				}
			]
		},
		{
			"name": "Remove Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DEL request code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Empty response\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							"pm.globals.set(\"last_id\", 0);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{localURL}}/api/Productos/remove/{{last_id}}",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"remove",
						"{{last_id}}"
					]
				},
				"description": "Remueve un producto de la base de datos"
			},
			"response": [
				{
					"name": "Remove Product 204 code",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://localhost:7138/api/Productos/remove/1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"remove",
								"1"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 04 Jul 2025 23:56:16 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						}
					],
					"cookie": [],
					"body": null
				},
				{
					"name": "Remove Product 404 Code",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{localURL}}/api/Productos/remove/2",
							"host": [
								"{{localURL}}"
							],
							"path": [
								"api",
								"Productos",
								"remove",
								"2"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 19:11:31 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "Requested ID was not found"
				}
			]
		},
		{
			"name": "Add invalid Product error handling",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set(\"product_name\", \"err\");\r",
							"pm.variables.set(\"product_description\", \"\");\r",
							"pm.variables.set(\"product_price\", (Math.random() * -1000).toFixed(2));\r",
							"pm.variables.set(\"product_quantity\", -Math.round(Math.random() * 10));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Unsuccessful POST request code\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Valid Error detection\", function () {\r",
							"    let response;\r",
							"\r",
							"    try {\r",
							"        response = pm.response.json();\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"Invalid JSON Object!\");\r",
							"    }\r",
							"\r",
							"    if (response.type == undefined) {\r",
							"        pm.expect.fail(\"Error response malformed!\");\r",
							"    }\r",
							"\r",
							"    pm.expect(response).to.have.property(\"errors\");\r",
							"    pm.expect(response.errors).to.have.property(\"Name\");\r",
							"    pm.expect(response.errors).to.have.property(\"Price\");\r",
							"    pm.expect(response.errors).to.have.property(\"Quantity\");\r",
							"    pm.expect(response.errors).to.have.property(\"Description\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{product_name}}\",\r\n    \"description\": \"{{product_description}}\",\r\n    \"price\": {{product_price}},\r\n    \"quantity\": {{product_quantity}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{localURL}}/api/Productos/add",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"add"
					]
				},
				"description": "Envia un producto invalido para testear error handling"
			},
			"response": [
				{
					"name": "Valid Error Code",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"asd\",\r\n    \"description\": \"\",\r\n    \"price\": -500,\r\n    \"quantity\": -2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7138/api/Productos/add",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"add"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/problem+json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 19:37:30 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"Name\": [\n            \"The field Name must be a string or array type with a minimum length of '4'.\"\n        ],\n        \"Price\": [\n            \"The field Price must be between 0,1 and 1,7976931348623157E+308.\"\n        ],\n        \"Quantity\": [\n            \"The field Quantity must be between 0 and 2147483647.\"\n        ],\n        \"Description\": [\n            \"The Description field is required.\"\n        ]\n    },\n    \"traceId\": \"00-f7871e84cbb9a11eb6c9f1be43661672-1cc42099f1853cc8-00\"\n}"
				}
			]
		},
		{
			"name": "Get by ID error handling",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Unsuccessful GET request code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Error message\", function () {\r",
							"    pm.expect(pm.response.text()).equals(\"Requested ID was not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{localURL}}/api/Productos/find/-1",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"find",
						"-1"
					]
				},
				"description": "Envia una ID invalida para probar como responde la API"
			},
			"response": [
				{
					"name": "Valid Error Code",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7138/api/Productos/find/-1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"find",
								"-1"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 20:01:52 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "Requested ID was not found"
				}
			]
		},
		{
			"name": "Invalid Product Update",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"try {\r",
							"    response = await pm.sendRequest({\r",
							"        url: pm.variables.get(\"localURL\") + \"/api/Productos/add\",\r",
							"        method: \"POST\",\r",
							"        header: {\r",
							"            \"Content-Type\": \"application/json\",\r",
							"        },\r",
							"        body: {\r",
							"            mode: \"raw\",\r",
							"            raw: \"{ \\\"name\\\": \\\"ErrorTest\\\", \\\"description\\\": \\\"Test\\\", \\\"price\\\": 40.0, \\\"quantity\\\": 5 }\"\r",
							"        }\r",
							"    });\r",
							"\r",
							"    console.log(response.json());\r",
							"\r",
							"    pm.variables.set(\"last_id\", response.json().id);\r",
							"} catch (err) {\r",
							"    console.error(err);\r",
							"}\r",
							"\r",
							"pm.variables.set(\"product_name\", \" \");\r",
							"pm.variables.set(\"product_description\", \"\");\r",
							"pm.variables.set(\"product_price\", (Math.random() * -1000).toFixed(2));\r",
							"pm.variables.set(\"product_quantity\", -Math.round(Math.random() * 10));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Unsuccessful PUT request code\", function () {\r",
							"        pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Valid Error detection\", function () {\r",
							"    let response;\r",
							"\r",
							"    try {\r",
							"        response = pm.response.json();\r",
							"    } catch (e) {\r",
							"        pm.expect.fail(\"Invalid JSON Object!\");\r",
							"    }\r",
							"\r",
							"    if (response.type == undefined) {\r",
							"        pm.expect.fail(\"Error response malformed!\");\r",
							"    }\r",
							"\r",
							"    pm.expect(response).to.have.property(\"errors\");\r",
							"    pm.expect(response.errors).to.have.property(\"Name\");\r",
							"    pm.expect(response.errors).to.have.property(\"Price\");\r",
							"    pm.expect(response.errors).to.have.property(\"Quantity\");\r",
							"    pm.expect(response.errors).to.have.property(\"Description\");\r",
							"});\r",
							"\r",
							"await pm.sendRequest({\r",
							"    url: pm.variables.get(\"localURL\") + \"/api/Productos/remove/\" + pm.variables.get(\"last_id\"),\r",
							"    method: \"DEL\"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{product_name}}\",\r\n    \"description\": \"{{product_description}}\",\r\n    \"price\": {{product_price}},\r\n    \"quantity\": {{product_quantity}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{localURL}}/api/Productos/update/{{last_id}}",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"update",
						"{{last_id}}"
					]
				},
				"description": "Envia un producto invalido para testear error handling"
			},
			"response": [
				{
					"name": "Valid Error Code",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"upd\",\r\n    \"description\": \"\",\r\n    \"price\": -60,\r\n    \"quantity\": -96\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7138/api/Productos/update/{{last_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"update",
								"{{last_id}}"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/problem+json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 20:28:54 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "{\n    \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n    \"title\": \"One or more validation errors occurred.\",\n    \"status\": 400,\n    \"errors\": {\n        \"Name\": [\n            \"The Name field is required.\",\n            \"The field Name must be a string or array type with a minimum length of '4'.\"\n        ],\n        \"Price\": [\n            \"The field Price must be between 0,1 and 1,7976931348623157E+308.\"\n        ],\n        \"Quantity\": [\n            \"The field Quantity must be between 0 and 2147483647.\"\n        ],\n        \"Description\": [\n            \"The Description field is required.\"\n        ]\n    },\n    \"traceId\": \"00-e488970de78361d966c7947f0eebcf71-4810e5a0e81314d1-00\"\n}"
				}
			]
		},
		{
			"name": "Remove Product error handling",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Unsuccessful DEL request code\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct Error message\", function () {\r",
							"    pm.expect(pm.response.text()).equals(\"Requested ID was not found\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{localURL}}/api/Productos/remove/-1",
					"host": [
						"{{localURL}}"
					],
					"path": [
						"api",
						"Productos",
						"remove",
						"-1"
					]
				},
				"description": "Envia una ID invalida para probar como responde la API"
			},
			"response": [
				{
					"name": "Valid Error Code",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://localhost:7138/api/Productos/remove/-1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7138",
							"path": [
								"api",
								"Productos",
								"remove",
								"-1"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Sat, 05 Jul 2025 20:30:27 GMT"
						},
						{
							"key": "Server",
							"value": "Kestrel"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						}
					],
					"cookie": [],
					"body": "Requested ID was not found"
				}
			]
		}
	],
	"variable": [
		{
			"key": "localURL",
			"value": "https://localhost:7138",
			"type": "default"
		}
	]
}